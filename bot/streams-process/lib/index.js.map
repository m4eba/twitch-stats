{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAIL,cAAc,EACd,aAAa,EACb,eAAe,EACf,iBAAiB,EAEjB,aAAa,GACd,MAAM,yBAAyB,CAAC;AACjC,OAAO,EAAE,IAAI,EAAE,MAAM,yBAAyB,CAAC;AAC/C,OAAO,EAAE,IAAI,EAAE,MAAM,IAAI,CAAC;AAC1B,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,EAAE,KAAK,EAAyC,MAAM,SAAS,CAAC;AACvE,OAAO,EAAE,UAAU,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AACzD,OAAO,EAAkB,KAAK,EAAE,MAAM,sBAAsB,CAAC;AAM7D,MAAM,cAAc,GAAgC;IAClD,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,YAAY,EAAE,aAAa,CAAC,KAAK,EAAE;CAC3D,CAAC;AASF,MAAM,MAAM,GAAG,IAAI,EAAE,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,gBAAgB,EAAE,CAAC,CAAC;AAE1D,CAAC,KAAK,IAAI,EAAE;IACV,MAAM,MAAM,GAAG,KAAK,CAClB;QACE,GAAG,cAAc;QACjB,GAAG,eAAe;QAClB,GAAG,cAAc;QACjB,GAAG,iBAAiB;QACpB,GAAG,aAAa;KACjB,EACD;QACE,eAAe,EAAE,QAAQ;KAC1B,CACF,CAAC;IAEF,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;IAEnB,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC;QACpB,IAAI,EAAE,MAAM,CAAC,MAAM;QACnB,IAAI,EAAE,MAAM,CAAC,MAAM;QACnB,QAAQ,EAAE,MAAM,CAAC,UAAU;QAC3B,IAAI,EAAE,MAAM,CAAC,MAAM;QACnB,QAAQ,EAAE,MAAM,CAAC,UAAU;KAC5B,CAAC,CAAC;IACH,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC;QACtB,QAAQ,EAAE,MAAM,CAAC,aAAa;QAC9B,OAAO,EAAE,MAAM,CAAC,WAAW;KAC5B,CAAC,CAAC;IACH,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,CAAC,CAAC;IAC/D,MAAM,QAAQ,CAAC,OAAO,EAAE,CAAC;IACzB,MAAM,QAAQ,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC;IAEvE,MAAM,QAAQ,CAAC,GAAG,CAAC;QACjB,WAAW,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE,EAAE;YACnD,MAAM,CAAC,IAAI,CACT;gBACE,KAAK;gBACL,SAAS;gBACT,OAAO;aACR,EACD,cAAc,CACf,CAAC;YACF,MAAM,CAAC,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YACtC,IAAI,OAAO,CAAC,KAAK,IAAI,IAAI,EAAE;gBACzB,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;aAC3B;iBAAM;gBACL,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;gBACpD,MAAM,aAAa,CAAC,IAAI,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;aACtC;QACH,CAAC;KACF,CAAC,CAAC;AACL,CAAC,CAAC,EAAE,CAAC","sourcesContent":["import {\n  KafkaConfig,\n  TwitchConfig,\n  PostgresConfig,\n  KafkaConfigOpt,\n  defaultValues,\n  TwitchConfigOpt,\n  PostgresConfigOpt,\n  FileConfig,\n  FileConfigOpt,\n} from '@twitch-stat-bot/common';\nimport { init } from '@twitch-stat-bot/twitch';\nimport { Pool } from 'pg';\nimport pino from 'pino';\nimport { Kafka, Message, ProducerBatch, TopicMessages } from 'kafkajs';\nimport { processEnd, processStream } from './processing';\nimport { ArgumentConfig, parse } from 'ts-command-line-args';\n\ninterface TopicConfig {\n  topic: string;\n}\n\nconst TopicConfigOpt: ArgumentConfig<TopicConfig> = {\n  topic: { type: String, defaultValue: defaultValues.topic },\n};\n\ninterface Config\n  extends KafkaConfig,\n    TwitchConfig,\n    PostgresConfig,\n    FileConfig,\n    TopicConfig {}\n\nconst logger = pino().child({ module: 'stream-process' });\n\n(async () => {\n  const config = parse<Config>(\n    {\n      ...KafkaConfigOpt,\n      ...TwitchConfigOpt,\n      ...TopicConfigOpt,\n      ...PostgresConfigOpt,\n      ...FileConfigOpt,\n    },\n    {\n      loadFromFileArg: 'config',\n    }\n  );\n\n  await init(config);\n\n  const pool = new Pool({\n    host: config.pgHost,\n    port: config.pgPort,\n    database: config.pgDatabase,\n    user: config.pgUser,\n    password: config.pgPassword,\n  });\n  const kafka = new Kafka({\n    clientId: config.kafkaClientId,\n    brokers: config.kafkaBroker,\n  });\n  const consumer = kafka.consumer({ groupId: 'stream-process' });\n  await consumer.connect();\n  await consumer.subscribe({ topic: config.topic, fromBeginning: true });\n\n  await consumer.run({\n    eachMessage: async ({ topic, partition, message }) => {\n      logger.info(\n        {\n          topic,\n          partition,\n          message,\n        },\n        'msg received'\n      );\n      const d = new Date(message.timestamp);\n      if (message.value == null) {\n        await processEnd(pool, d);\n      } else {\n        const stream = JSON.parse(message.value.toString());\n        await processStream(pool, d, stream);\n      }\n    },\n  });\n})();\n"]}