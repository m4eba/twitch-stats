{"version":3,"file":"processing.js","sourceRoot":"","sources":["../src/processing.ts"],"names":[],"mappings":"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","sourcesContent":["import { helix, PaginatedResult, Stream, User } from '@twitch-stat-bot/twitch';\nimport { Pool } from 'pg';\nimport { URLSearchParams } from 'url';\nimport moment from 'moment';\n\ninterface UserOnlineRow {\n  user_id: string;\n  stream_id: string;\n  last_update: string;\n}\n\nfunction assureGameId(game_id: string): string {\n  if (!game_id) return '0';\n  if (game_id.length == 0) return '0';\n  if (!/^\\d+$/.test(game_id)) return '0';\n  return game_id;\n}\n\nexport async function processStream(pool: Pool, time: Date, stream: Stream) {\n  await insertProbe(pool, stream, time);\n  const old = await pool.query('SELECT * FROM stream WHERE stream_id = $1', [\n    stream.id,\n  ]);\n\n  // insert into live\n  await insertLiveStream(pool, stream, time);\n\n  // insert new streams, update old ones\n  await insertUpdateStream(pool, stream, time);\n\n  let queries: Promise<void>[] = [];\n  if (old.rows.length == 0) {\n    queries.push(insertStreamGames(pool, stream, time));\n    queries.push(insertStreamTags(pool, stream, time));\n    queries.push(insertStreamTitles(pool, stream, time));\n  } else {\n    const s = old.rows[0];\n    if (s.title !== stream.title) {\n      queries.push(insertStreamTitles(pool, stream, time));\n    }\n    if (s.game_id !== stream.game_id) {\n      queries.push(insertStreamGames(pool, stream, time));\n    }\n    if (s.tag_id !== (stream.tag_ids ? stream.tag_ids.join(',') : '')) {\n      queries.push(insertStreamTags(pool, stream, time));\n    }\n  }\n  await Promise.all(queries);\n}\n\nexport async function processEnd(pool: Pool, time: Date) {\n  // get all live streams that are not updated in the last 15 minutes\n  const result = await pool.query(\n    \"SELECT * FROM user_online WHERE last_update < NOW() - INTERVAL '15 minutes'\"\n  );\n\n  let ids: string[] = [];\n  let idMap = new Map<string, UserOnlineRow>();\n  for (let i = 0; i < result.rows.length; ++i) {\n    ids.push(result.rows[i].user_id);\n    idMap.set(result.rows[i].user_id, result.rows[i]);\n  }\n\n  // new streams to process\n  let processStreams: Stream[] = [];\n  // streams to end\n  let endStreams: UserOnlineRow[] = [];\n\n  const now = new Date();\n  // check if stream still going\n  while (ids.length > 0) {\n    let params = ids.splice(0, 100);\n    const urlParams = new URLSearchParams();\n    urlParams.append('limit', '100');\n    for (let i = 0; i < params.length; ++i) {\n      urlParams.append('user_id', params[i]);\n    }\n\n    const streams = await helix<PaginatedResult<Stream>>(\n      `streams?${urlParams.toString()}`,\n      null\n    );\n    for (let i = 0; i < streams.data.length; ++i) {\n      const newStream = streams.data[i];\n      const oldStream = idMap.get(newStream.user_id);\n      if (oldStream == null) continue; // that should not happen\n      // test if user started a new stream\n      if (newStream.id !== oldStream.stream_id) {\n        // prcess the new stream\n        processStreams.push(newStream);\n        // end the old stream\n        endStreams.push(oldStream);\n      }\n      idMap.delete(oldStream.user_id);\n    }\n  }\n\n  // all ids that are still in the map need to be removed\n  idMap.forEach((oldStream: UserOnlineRow) => {\n    endStreams.push(oldStream);\n  });\n\n  // processing new streams\n  for (let i = 0; i < processStreams.length; ++i) {\n    await processStream(pool, now, processStreams[i]);\n  }\n\n  // end old streams\n  for (let i = 0; i < endStreams.length; ++i) {\n    // add 5 minutes to last update\n    const s = endStreams[i];\n    const plus5 = moment(s.last_update).add(5, 'minutes').utc().format();\n    await pool.query(\n      'UPDATE stream SET ended_at = $1, updated_at = $2 WHERE stream_id = $3',\n      [plus5, plus5, s.stream_id]\n    );\n  }\n}\n\nasync function insertLiveStream(pool: Pool, data: Stream, time: Date) {\n  // insert live\n  await pool.query(\n    `INSERT INTO user_online (user_id,stream_id,last_update,stream_id) VALUES ($1,$2,$3) \n    ON CONFLICT (user_id,stream_id) DO last_update=EXCLUDED.last_update`,\n    [data.user_id, data.id, time]\n  );\n}\n\nasync function insertProbe(pool: Pool, data: Stream, time: Date) {\n  // insert into probe\n  await pool.query(\n    `INSERT INTO probe (stream_id,user_id,viewers,time) VALUES \n    ($1,$2,$3,$4)\n    ON CONFLICT (stream_id, user_id,time) DO NOTHING`,\n    [data.id, data.user_id, data.viewer_count, time]\n  );\n}\n\nasync function insertUpdateStream(pool: Pool, d: Stream, time: Date) {\n  // insert into stream\n  await pool.query(\n    `INSERT INTO stream (stream_id,user_id,title,tags,game_id,started_at,updated_at) VALUES \n    ($1,$2,$3,$4,$5,$6,$7)\n    ON CONFLICT (stream_id) DO UPDATE SET title = EXCLUDED.title, tags = EXCLUDED.tags, game_id = EXCLUDED.game_id, ended_at = null, updated_at = EXCLUDED.updated_at`,\n    [\n      d.id,\n      d.user_id,\n      d.title,\n      d.tag_ids ? d.tag_ids.join(',') : '',\n      assureGameId(d.game_id),\n      d.started_at,\n      time,\n    ]\n  );\n}\n\nasync function insertStreamGames(pool: Pool, d: Stream, time: Date) {\n  await pool.query(\n    `INSERT INTO stream_game (stream_id,game_id,time) VALUES \n    ($1,$2,$3)\n    ON CONFLICT (stream_id, game_id,time) DO NOTHING\n    `,\n    [d.id, assureGameId(d.game_id), time]\n  );\n}\n\nasync function insertStreamTitles(pool: Pool, d: Stream, time: Date) {\n  await pool.query(\n    `INSERT INTO stream_title (stream_id,title,time) VALUES ',\n    ($1,$2,$3)\n    ON CONFLICT (stream_id, title,time) DO NOTHING\n    `,\n    [d.id, d.title, time]\n  );\n}\n\nasync function insertStreamTags(pool: Pool, d: Stream, time: Date) {\n  let queries = [];\n  for (let i = 0; i < d.tag_ids.length; ++i) {\n    queries.push(\n      pool.query(\n        `INSERT INTO stream_tags (stream_id,tag_id,time) VALUES \n    ($1,$2,$3)\n    ON CONFLICT (stream_id, tag_id,time) DO NOTHING\n    `,\n        [d.id, d.tag_ids[i], time]\n      )\n    );\n  }\n  await Promise.all(queries);\n}\n"]}