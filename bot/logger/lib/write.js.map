{"version":3,"file":"write.js","sourceRoot":"","sources":["../src/write.ts"],"names":[],"mappings":";;;;;AAAA,oDAMiC;AACjC,gDAAwB;AACxB,4CAAoB;AACpB,qCAAuE;AACvE,+DAA6D;AAQ7D,MAAM,eAAe,GAAiC;IACpD,SAAS,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,YAAY,EAAE,sBAAa,CAAC,KAAK,EAAE;IAC9D,OAAO,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IACzC,QAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;CAC3B,CAAC;AAIF,MAAM,MAAM,GAAG,IAAA,cAAI,GAAE,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC,CAAC;AAEtD,CAAC,KAAK,IAAI,EAAE;IACV,MAAM,MAAM,GAAW,IAAA,4BAAK,gDAErB,uBAAc,GACd,eAAe,GACf,sBAAa,GAElB;QACE,eAAe,EAAE,QAAQ;KAC1B,CACF,CAAC;IAEF,MAAM,KAAK,GAAG,IAAI,eAAK,CAAC;QACtB,QAAQ,EAAE,MAAM,CAAC,aAAa;QAC9B,OAAO,EAAE,MAAM,CAAC,WAAW;KAC5B,CAAC,CAAC;IACH,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,CAAC,CAAC;IAC/D,MAAM,QAAQ,CAAC,OAAO,EAAE,CAAC;IACzB,MAAM,QAAQ,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,SAAS,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC;IAC3E,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;IAElC,MAAM,GAAG,GAAG,YAAE,CAAC,iBAAiB,CAAC,MAAM,CAAC,QAAQ,EAAE;QAChD,QAAQ,EAAE,OAAO;QACjB,KAAK,EAAE,GAAG;KACX,CAAC,CAAC;IAEH,MAAM,QAAQ,CAAC,GAAG,CAAC;QACjB,WAAW,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE,EAAE;YACnD,MAAM,CAAC,IAAI,CACT;gBACE,KAAK;gBACL,SAAS;gBACT,OAAO;aACR,EACD,cAAc,CACf,CAAC;YACF,MAAM,CAAC,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YACtC,IAAI,OAAO,CAAC,KAAK,IAAI,IAAI,EAAE;gBACzB,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;gBACnC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;aACjB;iBAAM;gBACL,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;aACrB;YACD,IAAI,MAAM,CAAC,OAAO,EAAE;gBAClB,MAAM,QAAQ,CAAC,IAAI,CAAC;oBAClB,KAAK,EAAE,MAAM,CAAC,OAAO;oBACrB,QAAQ,EAAE,CAAC,OAAO,CAAC;iBACpB,CAAC,CAAC;aACJ;QACH,CAAC;KACF,CAAC,CAAC;AACL,CAAC,CAAC,EAAE,CAAC","sourcesContent":["import {\n  KafkaConfig,\n  KafkaConfigOpt,\n  defaultValues,\n  FileConfig,\n  FileConfigOpt,\n} from '@twitch-stat-bot/common';\nimport pino from 'pino';\nimport fs from 'fs';\nimport { Kafka, Message, ProducerBatch, TopicMessages } from 'kafkajs';\nimport { ArgumentConfig, parse } from 'ts-command-line-args';\n\ninterface WriterConfig {\n  fromTopic: string;\n  toTopic?: string;\n  filename: string;\n}\n\nconst WriterConfigOpt: ArgumentConfig<WriterConfig> = {\n  fromTopic: { type: String, defaultValue: defaultValues.topic },\n  toTopic: { type: String, optional: true },\n  filename: { type: String },\n};\n\ninterface Config extends WriterConfig, KafkaConfig, FileConfig {}\n\nconst logger = pino().child({ module: 'log-writer' });\n\n(async () => {\n  const config: Config = parse<Config>(\n    {\n      ...KafkaConfigOpt,\n      ...WriterConfigOpt,\n      ...FileConfigOpt,\n    },\n    {\n      loadFromFileArg: 'config',\n    }\n  );\n\n  const kafka = new Kafka({\n    clientId: config.kafkaClientId,\n    brokers: config.kafkaBroker,\n  });\n  const consumer = kafka.consumer({ groupId: 'stream-process' });\n  await consumer.connect();\n  await consumer.subscribe({ topic: config.fromTopic, fromBeginning: true });\n  const producer = kafka.producer();\n\n  const out = fs.createWriteStream(config.filename, {\n    encoding: 'utf-8',\n    flags: 'a',\n  });\n\n  await consumer.run({\n    eachMessage: async ({ topic, partition, message }) => {\n      logger.info(\n        {\n          topic,\n          partition,\n          message,\n        },\n        'msg received'\n      );\n      const d = new Date(message.timestamp);\n      if (message.value != null) {\n        out.write(JSON.stringify(message));\n        out.write('\\n');\n      } else {\n        out.write('null\\n');\n      }\n      if (config.toTopic) {\n        await producer.send({\n          topic: config.toTopic,\n          messages: [message],\n        });\n      }\n    },\n  });\n})();\n"]}